#!/bin/bash

function schedule {
crontab<<<"$(crontab -l)
$@"
}

#WARNING: Using "next" and "at" together may yield funny results.
function next {
	DATE="$(date -d "$1")"
	#armor to hinder reminders from triggering the scheduling of further events
	if [ $CALTOOL_RUN -ge 0 ]
	then schedule "$(date -d "$1" '+%M %H %d %m *')" "/home/jaseg/scripts/caltool $CALTOOL_SCRIPT $TAGS $((CALTOOL_RUN+1))"
	fi
}

function repeats {
	if [ $CALTOOL_RUN -lt $1 -a $CALTOOL_RUN -gt 0 ]
	then next $2
	fi
}

function remind {
	if [ -z "$DATE" ]
	then echo '"at" must be called before "remind"'
	fi
	if [ $CALTOOL_RUN -eq 0 ]
	then
		iteration=1
		for i in $@
		do	schedule "$(date -d "$DATE - $i" '+%M %H %d %m *')" "/home/jaseg/scripts/caltool $CALTOOL_SCRIPT $TAGS,REMINDER -$iteration"
			let iteration=iteration+1
		done
	elif [ $CALTOOL_RUN -lt 0 ]
	then #this is a reminder
		#I do not know if this handling is appropriate.
		REMINDER=true
	fi
}

#Like "next" but only schedules the script once at setup
function at {
	DATE="$(date -d "$1")"
	if [ $CALTOOL_RUN -eq 0 ]
	then next "$DATE"
	fi
}

function remove {
	#Not going to check the tags since they could change (who knows what that could be good for)
	#Also not checking the run count so only one entry ever exists for something after its reminders are processed
	crontab -l|grep -v "/home/jaseg/scripts/caltool $CALTOOL_SCRIPT"|crontab
}

REMINDER=false
CALTOOL_SCRIPT="$1"
#"default" tag added so there is always something to pass as an argument
TAGS=${2:-DEFAULT}
CALTOOL_RUN=${3:-0}

if [ $CALTOOL_RUN -gt 0 ]
then remove
fi

source "$1"
